diff --git a/modules/wpp/commerce_paypal_wpp.module b/modules/wpp/commerce_paypal_wpp.module
index fe5d2d8..3001640 100644
--- a/modules/wpp/commerce_paypal_wpp.module
+++ b/modules/wpp/commerce_paypal_wpp.module
@@ -25,10 +25,49 @@ function commerce_paypal_wpp_menu() {
     'file' => 'includes/commerce_paypal_wpp.admin.inc',
   );
 
+  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/paypal-wpp-refund'] = array(
+    'title' => 'Refund/Void',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_paypal_wpp_refund_void_form', 3, 5),
+    'access callback' => 'commerce_paypal_wpp_refund_access',
+    'access arguments' => array(3, 5),
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+    'context' => MENU_CONTEXT_INLINE,
+    'weight' => 2,
+    'file' => 'includes/commerce_paypal_wpp.admin.inc',
+  );
+
   return $items;
 }
 
 /**
+ * Determines access to the refund form for PayPal WPP credit card transactions.
+ *
+ * @param $order
+ *   The order the transaction is on.
+ * @param $transaction
+ *   The payment transaction object to be refunded.
+ *
+ * @return
+ *   TRUE or FALSE indicating refund access.
+ */
+function commerce_paypal_wpp_refund_access($order, $transaction) {
+  // Return FALSE if the transaction isn't for PayPal.
+  if ($transaction->payment_method != 'paypal_wpp' || $transaction->status != 'success' || $transaction->amount <= 0) {
+    return FALSE;
+  }
+
+  // Return FALSE if it is more than 120 days past the order payment.
+  if (REQUEST_TIME - $transaction->created > 86400 * 120) {
+    return FALSE;
+  }
+
+  // Allow access if the user can update payments on this transaction.
+  return commerce_payment_transaction_access('update', $transaction);
+}
+
+
+/**
  * Determines access to the prior authorization capture form for PayPal WPP
  * credit card transactions.
  *
diff --git a/modules/wpp/includes/commerce_paypal_wpp.admin.inc b/modules/wpp/includes/commerce_paypal_wpp.admin.inc
index e369d80..099abde 100644
--- a/modules/wpp/includes/commerce_paypal_wpp.admin.inc
+++ b/modules/wpp/includes/commerce_paypal_wpp.admin.inc
@@ -192,3 +192,126 @@ function commerce_paypal_wpp_capture_form_submit($form, &$form_state) {
   // Redirect back to the current order payment page.
   $form_state['redirect'] = 'admin/commerce/orders/' . $form_state['order']->order_id . '/payment';
 }
+
+/**
+ * Implements hook_form().
+ *
+ * Form callback: allows the user to void a transaction.
+ */
+function commerce_paypal_wpp_refund_void_form($form, &$form_state, $order, $transaction) {
+  $form_state['order'] = $order;
+  $form_state['transaction'] = $transaction;
+
+  // Load and store the payment method instance for this transaction.
+  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
+  $form_state['payment_method'] = $payment_method;
+
+  $wrapper = entity_metadata_wrapper('commerce_order', $order);
+  $order_total = $wrapper->commerce_order_total->value();
+  $balance = commerce_payment_order_balance($order);
+  $default_amount = $order_total['amount'] - $balance['amount'];
+
+  // Convert the price amount to a user friendly decimal value.
+  $default_amount = commerce_currency_amount_to_decimal($default_amount, $transaction->currency_code);
+
+  $description = implode('<br />', array(
+    t('Refund amount: @amount', array('@amount' => commerce_currency_format($transaction->amount, $transaction->currency_code))),
+      ));
+
+  $form['amount'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Refund amount'),
+    '#description' => $description,
+    '#default_value' => $default_amount,
+    '#field_suffix' => check_plain($transaction->currency_code),
+    '#size' => 16,
+  );
+
+  $form_state['default_amount'] = $default_amount;
+
+  $form = confirm_form($form, t('Are you sure you want to issue a refund?'), 'admin/commerce/orders/' . $order->order_id . '/payment', '', t('Refund'), t('Cancel'), 'confirm'
+  );
+
+  return $form;
+}
+
+/**
+ * Validate handler: ensure a refund has not expired.
+ */
+function commerce_paypal_wpp_refund_void_form_validate($form, &$form_state) {
+  $transaction = $form_state['transaction'];
+  $amount = $form_state['values']['amount'];
+
+  // Ensure a positive numeric amount has been entered for refund.
+  if (!is_numeric($amount) || $amount <= 0) {
+    form_set_error('amount', t('You must specify a positive numeric amount to refund.'));
+  }
+
+  // Ensure the amount is less than or equal to the payment amount.
+  if ($amount > $form_state['default_amount']) {
+    form_set_error('amount', t('You cannot refund more than you payed through Paypal.'));
+  }
+
+  // If the refund period has expired, display an error message and redirect.
+  if (time() - $transaction->created > 86400 * 30) {
+    drupal_set_message(t('This transaction has passed its 30 day limit and cannot be refunded.'), 'error');
+    drupal_goto('admin/commerce/orders/' . $form_state['order']->order_id . '/payment');
+  }
+}
+
+/**
+ * Submit handler: process a refund of a prior transaction.
+ */
+function commerce_paypal_wpp_refund_void_form_submit($form, &$form_state) {
+  $transaction = $form_state['transaction'];
+  $amount = $form_state['values']['amount'];
+  $order = $form_state['order'];
+  $default_amount = $form_state['default_amount'];
+
+  // Because the IPN request sent in synchronous to this form needs to load the
+  // order at the same time we are obliged to release the lock to avoid a
+  // timeout error.
+  entity_get_controller('commerce_order')->resetCache(array($order->order_id));
+
+  // Load and store the payment method instance for this transaction.
+  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
+
+  $nvp = array(
+    'METHOD' => 'RefundTransaction',
+    'TRANSACTIONID' => $transaction->remote_id,
+    'AMT' => $amount,
+    'REFUNDTYPE' => $default_amount - $amount ? 'Partial' : 'Full',
+  );
+
+  // Submit the capture request request to PayPal.
+  $response = commerce_paypal_wpp_request($payment_method, $nvp, $order);
+  $transaction->payload[REQUEST_TIME . '-refund'] = $response;
+
+  switch ($response['ACK']) {
+    case 'SuccessWithWarning':
+    case 'Success':
+      drupal_set_message(t('Prior authorization refunded successfully.'));
+
+      // Update the original transaction amount to the actual capture amount,
+      // its remote ID to the capture's transaction ID, and its statuses to
+      // indicate successful payment.
+      $transaction->amount = commerce_currency_decimal_to_amount($default_amount - $amount, $transaction->currency_code);
+      //$transaction->remote_id = $response['TRANSACTIONID'];
+      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
+      $transaction->remote_status = $response['PAYMENTSTATUS'];
+
+      // Note the capture in the transaction message.
+      $transaction->message .= '<br />' . t('Refunded: @date', array('@date' => format_date(REQUEST_TIME, 'short')));
+      break;
+
+    default:
+      // Display an error message but leave the transaction pending.
+      drupal_set_message(t('Refund failed, so the transaction will remain in a pending status.'), 'error');
+      drupal_set_message(check_plain($response['L_LONGMESSAGE0']), 'error');
+      $transaction->payload[REQUEST_TIME . '-refund'] = $response;
+  }
+
+  commerce_payment_transaction_save($transaction);
+
+  $form_state['redirect'] = 'admin/commerce/orders/' . $form_state['order']->order_id . '/payment';
+}
